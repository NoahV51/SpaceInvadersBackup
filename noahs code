/*----------------------------------------------
                 HEADERS
------------------------------------------------*/
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <unistd.h>
#include <ncurses.h>
#include <math.h>
#include "!si.h"

#define MAX_BOMBS 1000




/*----------------------------------------------
                PROTOTYPES
------------------------------------------------*/

void initialize();

void makeEraseString(char buf[], int len);

void printWelcomeScreen(int maxy, int maxx);
void printInstructions(int maxy, int maxx);
void printTank();
void printAliens();
void printBarriers();
int checkForQuit(int c);
void finish(int sig);
int tankPositionX;
int tankPositionY;
int alienPositionX;
int alienPositionY;
int alienPositionX2;
int alienPositionY2;
int alienPositionX3;
int alienPositionY3;
int alienPositionX4;
int alienPositionY4;
double tankVelocityX;
double tankVelocityChange;
int tankOldPositionX;
int alienOldPositionX;
int alienOldPositionX2;
int alienOldPositionX3;
int alienOldPositionX4;
void moveTank(char c, int maxx);
void moveAlien(char c, int maxx);
void menu(struct options *settings);

/*----------------------------------------------
                MAIN FUNCTION
------------------------------------------------*/
int main(int argc, char *argv[]){

  

    //Initialize Variables
    
    //int input;
    int maxx, maxy; //maxx and maxy size of terminal
    tankPositionX = 2;
    tankPositionY = 22;
    alienPositionX = 10;
    alienPositionY = 3;
    alienPositionX2 = 20;
    alienPositionY2 = 3;
    alienPositionX3 = 30;
    alienPositionY3 = 3;
    alienPositionX4 = 40;
    alienPositionY4 = 3;
    int ch;
    //Start Curses
    initialize();
    getmaxyx(stdscr, maxy, maxx);      // get current screen size 
     

       //Display Tittle Screen
       printWelcomeScreen(maxy, maxx);    // Print welcome screen
       erase();
   
       printInstructions(maxy, maxx);
       erase();

	char in = '\0';

	while(in != 'q'){

          //print tank
          printTank();

       //move tank
          moveTank(in, maxx);

     //print aliens 
     printAliens();
	moveAlien(in, maxx);
   

     //print barriers
     printBarriers();

     in = getch();

 }

   
      
      
      //End Curses
      finish(0);
     
      //End Program 
      return 0;

}


/*----------------------------------------------
                 FUNCTIONS
------------------------------------------------*/

void initialize(){
 //terminal graphics
 
 intrflush( stdscr, FALSE );
 (void) initscr(); //initializes the curses library
 start_color();
 keypad(stdscr, TRUE); //enable keyboard mapping
 (void) nonl(); //tells curses not to do NL-> CR/NL on output
 (void) cbreak(); //take input chars one at a time
 (void) noecho(); //dont echo input
 nodelay(stdscr, TRUE);
 init_pair(1, COLOR_BLUE, COLOR_BLACK);
 init_pair(2, COLOR_RED, COLOR_RED); 
 init_pair(3, COLOR_GREEN , COLOR_GREEN);
 init_pair(4, COLOR_BLUE, COLOR_BLUE);
 init_pair(5, COLOR_BLACK, COLOR_BLACK);
 //initialize game global variables
 

 //tank
 double tankVelocityX = 0.0001; 
 double tankVelocityY = 0.0;
 double tankVelocityChage = 0.0005;
// double tankPositionX = maxx - 70 ;
// double tankPositionY = maxy - 2;
 double speed_shotX = 0.0; 
 double speed_shotY = 0.0005; //speed of the bullet in y dir.

 //alien
 double alienVelocityX = 0.0001;
 double alienVelocityY = 0.0;
 //double alienPositionX = ;
 //double alienPositionY = ;
}

int checkForQuit(int c){
return (c == 'q' || c == 'Q');
}


void makeEraseString(char buf[], int len){
  for(int i = 0; i < len; i++){
    buf[i] = ' ';
  }
  buf[len] = '\0';
  return;
}



void printBarriers(){

 //set barrier color 
 attron(COLOR_PAIR(4));

 //print the barriers
 mvaddch(19,5, '#');
 mvaddch(19,6, '#');
 mvaddch(19,7, '#');
 mvaddch(19,8, '#');
 mvaddch(19,9, '#');
 mvaddch(19,10, '#');
 mvaddch(19,11, '#');
 mvaddch(19,12, '#');

 mvaddch(19,20, '#');
 mvaddch(19,21, '#');
 mvaddch(19,22, '#');
 mvaddch(19,23, '#');
 mvaddch(19,24, '#');
 mvaddch(19,25, '#');
 mvaddch(19,26, '#');
 mvaddch(19,27, '#');

 mvaddch(19,36, '#');
 mvaddch(19,37, '#');
 mvaddch(19,38, '#');
 mvaddch(19,39, '#');
 mvaddch(19,40, '#');
 mvaddch(19,41, '#');
 mvaddch(19,42, '#');
 mvaddch(19,43, '#');

 mvaddch(19,51, '#');
 mvaddch(19,52, '#');
 mvaddch(19,53, '#');
 mvaddch(19,54, '#');
 mvaddch(19,55, '#');
 mvaddch(19,56, '#');
 mvaddch(19,57, '#');
 mvaddch(19,58, '#');

 mvaddch(19,67, '#');
 mvaddch(19,68, '#');
 mvaddch(19,69, '#');
 mvaddch(19,70, '#');
 mvaddch(19,71, '#');
 mvaddch(19,72, '#');
 mvaddch(19,73, '#');
 mvaddch(19,74, '#');

 mvaddch(18,6, '#');
 mvaddch(18,7, '#');
 mvaddch(18,8, '#');
 mvaddch(18,9, '#');
 mvaddch(18,10, '#');
 mvaddch(18,11, '#');
 mvaddch(18,21, '#');
 mvaddch(18,22, '#');
 mvaddch(18,23, '#');
 mvaddch(18,24, '#');
 mvaddch(18,25, '#');
 mvaddch(18,26, '#');

 mvaddch(18,37, '#');
 mvaddch(18,38, '#');
 mvaddch(18,39, '#');
 mvaddch(18,40, '#');
 mvaddch(18,41, '#');
 mvaddch(18,42, '#');

 mvaddch(18,52, '#');
 mvaddch(18,53, '#');
 mvaddch(18,54, '#');
 mvaddch(18,55, '#');
 mvaddch(18,56, '#');
 mvaddch(18,57, '#');

 mvaddch(18,68, '#');
 mvaddch(18,69, '#');
 mvaddch(18,70, '#');
 mvaddch(18,71, '#');
 mvaddch(18,72, '#');
 mvaddch(18,73, '#');

 mvaddch(17,7, '#');
 mvaddch(17,8, '#');
 mvaddch(17,9, '#');
 mvaddch(17,10, '#');

 mvaddch(17,22, '#');
 mvaddch(17,23, '#');
 mvaddch(17,24, '#');
 mvaddch(17,25, '#');

 mvaddch(17,38, '#');
 mvaddch(17,39, '#');
 mvaddch(17,40, '#');
 mvaddch(17,41, '#');

 mvaddch(17,53, '#');
 mvaddch(17,54, '#');
 mvaddch(17,55, '#');
 mvaddch(17,56, '#');

 mvaddch(17,69, '#');
 mvaddch(17,70, '#');
 mvaddch(17,71, '#');
 mvaddch(17,72, '#');

 refresh(); //refresh screen
 
 attroff(COLOR_PAIR(1)); // go back to default colors


return;
}



void printWelcomeScreen(int maxy, int maxx){
  erase(); // clear screen
  attron(COLOR_PAIR(1));  //change color
  mvprintw(maxy/4, maxx/2 - 15, "Welcome to !(Space Invaders)"); // print welcome, approximately middle of screen
  mvprintw(maxy/4+1, maxx/2 - 15, "----------------------------");
  mvprintw(maxy/4+15, maxx/2 - 15, "press any key to continue...");
  refresh(); //refresh screen
  attroff(COLOR_PAIR(1)); // go back to default colors
  //sleep(2); // sleep for a second by calling the linux/unix sleep library call
  char in;
  scanf("%c", &in);	
  return;
}

void moveTank(char c, int maxx){

switch(c)
 {
        case '6':
        tankOldPositionX = tankPositionX;
        tankPositionX +=2;
        erase;
     break;
        case '4':
        tankOldPositionX = tankPositionX;
        tankPositionX -=2;
        erase;
     break;
 }

}



void moveAlien(char c, int maxx)
{
	switch(c)
 {
        case '6':
        alienOldPositionX = alienPositionX;
        alienPositionX +=2;
        erase;
     break;
        case '4':
        alienOldPositionX = alienPositionX;
        alienPositionX -=2;
        erase;
     break;
 }
	
}


void printTank(){
 attron(COLOR_PAIR(3));
 mvaddch(tankPositionY, tankPositionX, 'x');
 mvaddch(tankPositionY,tankPositionX + 1, 'x');
 mvaddch(tankPositionY,tankPositionX +2, 'x');

 attron(COLOR_PAIR(5));
 mvaddch(tankPositionY, tankOldPositionX, 'x');
 mvaddch(tankPositionY,tankOldPositionX + 1, 'x');
 mvaddch(tankPositionY,tankOldPositionX +2, 'x');

 refresh(); //refresh screen

}





void printAliens(){
 
 //set alien color
 //attron(COLOR_PAIR(2));
 //column one
attron(COLOR_PAIR(2));
 mvaddch(alienPositionY, alienPositionX, 'x');
 mvaddch(alienPositionY,alienPositionX + 1, 'x');
 mvaddch(alienPositionY,alienPositionX +2, 'x');

 attron(COLOR_PAIR(5));
 mvaddch(alienPositionY, alienOldPositionX, 'x');
 mvaddch(alienPositionY,alienOldPositionX + 1, 'x');
 mvaddch(alienPositionY,alienOldPositionX +2, 'x');

/*attron(COLOR_PAIR(2));
 mvaddch(alienPositionY2, alienPositionX2, 'x');
 mvaddch(alienPositionY2,alienPositionX2 + 1, 'x');
 mvaddch(alienPositionY2,alienPositionX2 +2, 'x');

 attron(COLOR_PAIR(5));
 mvaddch(alienPositionY2, alienOldPositionX2, 'x');
 mvaddch(alienPositionY2,alienOldPositionX2 + 1, 'x');
 mvaddch(alienPositionY2,alienOldPositionX2 +2, 'x');

attron(COLOR_PAIR(2));
 mvaddch(alienPositionY3, alienPositionX3, 'x');
 mvaddch(alienPositionY3,alienPositionX3 + 1, 'x');
 mvaddch(alienPositionY3,alienPositionX3 +2, 'x');

 attron(COLOR_PAIR(5));
 mvaddch(alienPositionY3, alienOldPositionX3, 'x');
 mvaddch(alienPositionY3,alienOldPositionX3 + 1, 'x');
 mvaddch(alienPositionY3,alienOldPositionX3 +2, 'x');

attron(COLOR_PAIR(2));
 mvaddch(alienPositionY4, alienPositionX4, 'x');
 mvaddch(alienPositionY4,alienPositionX4 + 1, 'x');
 mvaddch(alienPositionY4,alienPositionX4 +2, 'x');

 attron(COLOR_PAIR(5));
 mvaddch(alienPositionY4, alienOldPositionX4, 'x');
 mvaddch(alienPositionY4,alienOldPositionX4 + 1, 'x');
 mvaddch(alienPositionY4,alienOldPositionX4 +2, 'x');*/
 /*mvaddch(12,22, 'x');
 mvaddch(9,22, 'a');
 mvaddch(6,22, 'v');
 mvaddch(3,22, 'k');
 //Column two
 mvaddch(12,23, 'x');
 mvaddch(9,23, 'a');
 mvaddch(6,23, 'v');
 mvaddch(3,23, 'k');
 //column three
 mvaddch(12,24, 'x');
 mvaddch(9,24, 'a');
 mvaddch(6,24, 'v');
 mvaddch(3,24, 'k');
 //column four
 mvaddch(12,30, 'x');
 mvaddch(9,30, 'a');
 mvaddch(6,30, 'v');
 mvaddch(3,30, 'k');
 //column five
 mvaddch(12,31, 'x');
 mvaddch(9,31, 'a');
 mvaddch(6,31, 'v');
 mvaddch(3,31, 'k');
 //column six
 mvaddch(12,32, 'x');
 mvaddch(9,32, 'a');
 mvaddch(6,32, 'v');
 mvaddch(3,32, 'k');
 //column seven
 mvaddch(12,38, 'x');
 mvaddch(9,38, 'a');
 mvaddch(6,38, 'v');
 mvaddch(3,38, 'k');
 //column eight
 mvaddch(12,39, 'x');
 mvaddch(9,39, 'a');
 mvaddch(6,39, 'v');
 mvaddch(3,39, 'k');
 //column nine
 mvaddch(12,40, 'x');
 mvaddch(9,40, 'a');
 mvaddch(6,40, 'v');
 mvaddch(3,40, 'k');
 //column ten
 mvaddch(12,46, 'x');
 mvaddch(9,46, 'a');
 mvaddch(6,46, 'v');
 mvaddch(3,46, 'k');
 //column eleven
 mvaddch(12,47, 'x');
 mvaddch(9,47, 'a');
 mvaddch(6,47, 'v');
 mvaddch(3,47, 'k');
 //column twelve
 mvaddch(12,48, 'x');
 mvaddch(9,48, 'a');
 mvaddch(6,48, 'v');
 mvaddch(3,48, 'k');
 //column thirteen
 mvaddch(12,54, 'x');
 mvaddch(9,54, 'a');
 mvaddch(6,54, 'v');
 mvaddch(3,54, 'k');
 //column fourteen
 mvaddch(12,55, 'x');
 mvaddch(9,55, 'a');
 mvaddch(6,55, 'v');
 mvaddch(3,55, 'k');
 //column fifteen
 mvaddch(12,56, 'x');
 mvaddch(9,56, 'a');
 mvaddch(6,56, 'v');
 mvaddch(3,56, 'k');
*/
 return;
}




void printInstructions(int maxy, int maxx){
 erase(); // clear screen
 attron(COLOR_PAIR(1));  //change color
 mvprintw(maxy/4, maxx/2 - 10, "INSTRUCTIONS"); // print instructions, approximately middle of screen
 mvprintw(maxy/4+1, maxx/2 - 10, "------------"); 
 mvprintw(maxy/4+3, maxx/2 - 25, "Move: Number Pad on Right of Keyboard(4(LEFT)/6(RIGHT))");
 mvprintw(maxy/4+4, maxx/2 - 10, "Shoot: Spacebar");
 mvprintw(maxy/4+15, maxx/2 - 15, "press any key to continue...");
 
 refresh(); //refresh screen
 attroff(COLOR_PAIR(1)); // go back to default colors
 //sleep(3); // sleep for a second by calling the linux/unix sleep library call
 char in;
 scanf("%c", &in);
 return;
}



void finish(int sig)
{
    endwin();
    //do your non-curses wrapup here 
    // print a nice message
    
    printf ("\nThe Game Has Ended\n");
 
    return;//    exit(0);
}

void menu(struct options *settings) {
   char option, buf[30];
   

   clear();
   echo();
   nocbreak();
   nodelay(stdscr,0);

   
   
   }



//draw something 
/*
attron(COLOR_PAIR(2));
mvaddch(5,5, 'x');
mvaddch(4,5, 'x');
mvaddch(3,5, 'x');
refresh(); //refresh screen
  attroff(COLOR_PAIR(1)); // go back to default colors
  char in;
  scanf("%c", &in);
	erase();   
     //Display Tittle Screen
	  printWelcomeScreen(maxy, maxx); 
scanf("%c", &in);
*/
